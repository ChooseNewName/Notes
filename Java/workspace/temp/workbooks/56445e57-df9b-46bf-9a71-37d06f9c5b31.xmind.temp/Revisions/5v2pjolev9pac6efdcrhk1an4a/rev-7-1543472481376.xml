<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="5v2pjolev9pac6efdcrhk1an4a" modified-by="lijiekun" style-id="4hbqqujncmfi3e38lv1gc13tha" theme="61s54lvvp1hl17ufr99sdgf3n4" timestamp="1543472388969" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="28jfj7f1ove0ts1csp1p9rco90" modified-by="lijiekun" structure-class="org.xmind.ui.map.unbalanced" style-id="0b9ov2g27fm6b28hm0j1vsr1ac" timestamp="1543320449892"><title>跨域请求</title><children><topics type="attached"><topic id="6rsgu3oghajqnkfmq1p7m4ge3n" modified-by="lijiekun" timestamp="1543220107791"><title>JSONP</title></topic><topic id="1o7tnf8scfcalv0qnuacsjoff9" modified-by="lijiekun" timestamp="1543319915185"><title>跨域资源共享CORS( Cross Origin Resource Share）</title><children><topics type="attached"><topic id="62vgfm6q12v6e1f0b796bg4bst" modified-by="lijiekun" timestamp="1543320666714"><title>什么是跨域资源请求 （CORS） ？</title><children><topics type="attached"><topic id="3okm9j70vbqm0askunnne1d91s" modified-by="lijiekun" timestamp="1543320634504"><title svg:width="420">   跨域资源请求时一种机制，它使用额外的 HTTP 头来告诉浏览器当前的 Web 应用请求可以跨域访问不同源服务器上的指定资源。</title></topic><topic id="18snu9acfi6k2d9je48r8mnqie" modified-by="lijiekun" timestamp="1543320639886"><title svg:width="500">  简单来说：当一个资源需要访问不同域或端口的资源的时候，当前资源就会发起一个跨域的 HTTP 请求，请求时会带你的一个暗号，然后跟服务器进行匹配，如果成功了表</title></topic><topic id="3sc8fq5q2uuhvic0eeb14dio3a" modified-by="lijiekun" timestamp="1543320803077"><title svg:width="561">它的实现原理很简单: 天王盖地虎，小鸡顿蘑菇 ；浏览器说，如果想让我显示跨域请求获取的数据，是可以的，不过要满足我的要求:&#13;
	浏览器：在用户发送跨域请求的时候，会自动在请求 head 里追加 Origin 字段&#13;
	服务器：如果允许我访问你的数据，你就在返回的时候在响应 head 里添加  Access-Control-Allow-Origin 字段&#13;
	浏览器：如果能从你返回的数据里发现 Access-Control-Allow-Origin 并核对正确，就向用户渲染数据，否则。。一概跨域错误！！！</title></topic></topics></children></topic><topic id="36vbtaqmvqql8ldbg01ej8895i" modified-by="lijiekun" timestamp="1543304505532"><title>产生的背景</title><children><topics type="attached"><topic id="3uggbop3odfroj88l4db19alfa" modified-by="lijiekun" timestamp="1543220306935"><title svg:width="443">浏览器出于安全原因会限制从脚本内发起的跨域请求；或者是跨域请求成功了，但返回结果被浏览器拦截了，因为这个结果不是同源服务器返回的，所以，为了解决这个问题，就出现各种各样的跨域解决方式</title></topic></topics></children></topic><topic id="62744nuathpmfvjr1jes5vc9hc" modified-by="lijiekun" timestamp="1543319915155"><title svg:width="250">什么情况下需要跨域资源共享 （CORS）？</title><children><topics type="attached"><topic id="26ths4j9j20j6095dnccq484m3" modified-by="lijiekun" timestamp="1543220107793"><title svg:width="425">1、 Web 字体 (CSS 中通过 @font-face 使用跨域字体资源), 因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用。</title></topic><topic id="0nn2hv5id2monraiep3ek5jdfn" modified-by="lijiekun" timestamp="1543220107793"><title svg:width="370">2、 站点 http://domain-a.com 的某 HTML 页面通过 &lt;img&gt; 的 src 请求 http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。</title></topic></topics></children></topic><topic id="7vghkhc7oirmbgipou064vu4h7" modified-by="lijiekun" timestamp="1543231426545"><title>解决方式</title><children><topics type="attached"><topic id="1qe59eccnikrmimae3i4jg161r" modified-by="lijiekun" timestamp="1543279068836"><title svg:width="313">跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。下面是 3 种跨域请求方式</title><children><topics type="attached"><topic id="3qbg11cg7e8591lm8cr7do0otj" modified-by="lijiekun" timestamp="1543279062433"><title>简单请求</title><children><topics type="attached"><topic id="1gjslj0b9rh52of7rv9c9qbmn0" modified-by="lijiekun" timestamp="1543231562060"><title>限制条件</title><children><topics type="attached"><topic id="0de9fmhf22e8f068n4jancsqih" modified-by="lijiekun" timestamp="1543220107795"><title>请求方式：GET、head、post</title></topic><topic id="66p7v0duadnjr5ijh7jq50vfug" modified-by="lijiekun" timestamp="1543220107796"><title svg:width="500">Content-Type 的值仅限于下列三者之一：text/plain、multipart/form-data、application/x-www-form-urlencoded</title></topic></topics></children></topic><topic id="3kfkf6fh0moi3d343o9milof28" modified-by="lijiekun" timestamp="1543279061183"><title>使用方式</title><children><topics type="attached"><topic id="6bp3d0so8p86cev6dfgsjm7s3a" modified-by="lijiekun" timestamp="1543233484921"><title svg:width="282">1、首先浏览器会先 HTTP 请求首部字段 当中加上 Origin 参数表明该请求来源于哪里 </title></topic><topic id="248s2m0f5mlk7vk862uhab602s" modified-by="lijiekun" timestamp="1543233484921"><title svg:width="322"> 2、然后根据服务器响应的结果中携带了响应首部字段 Access-Control-Allow-Origin 就能完成最简单的访问控制。</title></topic><topic id="5trv75evrjfbu3ionvu2lp9nc7" modified-by="lijiekun" timestamp="1543233484921"><title svg:width="346">3、如果服务端返回的 Access-Control-Allow-Origin :  *  表明，该资源可以被任意外域访问。</title></topic><topic id="00mp5g812h6juuf0a97p601lk3" modified-by="lijiekun" timestamp="1543233484921"><title svg:width="393">4、如果服务端仅允许来自 http://foo.example 的访问，该首部字段的内容如下：&#13;
Access-Control-Allow-Origin: http://foo.example  那么现在，除了 http://foo.example，其它外域均不能访问该资源。</title></topic></topics></children></topic><topic branch="folded" id="51gpgnr9g9gcvgoqq1h6l431hn" modified-by="lijiekun" timestamp="1543320918711"><title>语法</title><children><topics type="attached"><topic id="2b5mbnneleg4c63h8b4qr10etl" modified-by="lijiekun" timestamp="1543320910900"><title svg:width="500"># ---请求---&#13;
GET /resources/public-data/ HTTP/1.1&#13;
Host: bar.other&#13;
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre&#13;
...&#13;
Origin: http://foo.example&#13;
&#13;
&#13;
# ---响应---&#13;
HTTP/1.1 200 OK&#13;
Content-Type: application/xml&#13;
...&#13;
Access-Control-Allow-Origin: *&#13;
&#13;
# ---数据---&#13;
[XML Data]</title></topic></topics></children></topic></topics></children></topic><topic id="0o2qrpfm2poei825r2kauhfvda" modified-by="lijiekun" timestamp="1543321214250"><title>预检请求（Preflight）</title><children><topics type="attached"><topic id="1ejbamlflirc4mjoaho4lvltrr" modified-by="lijiekun" timestamp="1543231765674"><title>限制条件</title><children><topics type="attached"><topic id="7184ka4948j2p5q1vrcaii8i54" modified-by="lijiekun" timestamp="1543231765647"><title svg:width="500">请求方式：PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCH</title></topic><topic id="2kj00pmt1vm3c2hevssmddo8m2" modified-by="lijiekun" timestamp="1543231765647"><title svg:width="500"> Content-Type 的值不属于下列之一: application/x-www-form-urlencoded、&#13;
multipart/form-data、text/plain</title></topic></topics></children></topic><topic id="1o1e75drjo107bf5ff22bq26qm" modified-by="lijiekun" timestamp="1543233252360"><title>背景</title><children><topics type="attached"><topic id="5nacg18g49k0oonu1gle6frqnr" modified-by="lijiekun" timestamp="1543321106226"><title svg:width="500">1、在上面的中我们已经介绍过了简单请求，虽然能解决了跨域请求问题，但是还有所问题，例如简单请求在发送大数据时候给（跨域服务器）的时候，（跨域服务器）不受理这个请求，那么请求只能失败了，并且浪费了大量时间；所以我们就可以先发送一个 【预检】 给（跨域服务器），试探它接不接受跨域请求，然后我们再把传输数据过去，避免上传数据后（跨域服务器）不接受跨域请求。</title></topic></topics></children></topic><topic id="7d906ge7v0bvemuqg9o6pqdf29" modified-by="lijiekun" timestamp="1543321167387"><title>使用方式</title><children><topics type="attached"><topic id="591lk0o522m80ggmm3fu96042r" modified-by="lijiekun" timestamp="1543472356954"><title>1、</title></topic></topics></children></topic><topic branch="folded" id="0qlbkie8gukfngk9j6j3orh470" modified-by="lijiekun" timestamp="1543472388969"><title>语法</title><children><topics type="attached"><topic id="4a9sajat8hvktmnd4q28j28tqv" modified-by="lijiekun" timestamp="1543472383977"><title>$.ajax({&#13;
            method: "post",&#13;
            url: url + "/KuayuCors1",&#13;
            data: {&#13;
                "name":"张三",&#13;
                "age":18&#13;
            },&#13;
            headers:{contentLanguage:"zh-CN"},&#13;
            success:function (data) {&#13;
                alert(data);&#13;
            }&#13;
        })</title></topic></topics></children></topic></topics></children></topic><topic id="1g20vo9pmi8vtova5qudv5ak23" modified-by="lijiekun" timestamp="1543286412872"><title>附身份凭证请求</title><children><topics type="attached"><topic id="3pg1sn96q683h9beg5aek117mg" modified-by="lijiekun" timestamp="1543286296096"><title>限制条件</title><children><topics type="attached"><topic id="3bj7q2enrfdrmhl5kpe39aafl0" modified-by="lijiekun" timestamp="1543286303761"><title>请求方式</title></topic></topics></children></topic><topic id="2n9g0ajqem3t4ijlvj2gbd68bl" modified-by="lijiekun" timestamp="1543286423812"><title>背景</title><children><topics type="attached"><topic id="1691nv6gbriqgf7n8i8kb95jnv" modified-by="lijiekun" timestamp="1543321081613"><title svg:width="337">为了安全（。。。。就是为了安全），默认在跨域请求中，浏览器是不会将 cookie 等信息连带发送的。</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="2t04f0qir4p332qs6c7r42ksnv" modified-by="lijiekun" timestamp="1543220107800"><title>分支主题 3</title></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>3</right-number></content></extension></extensions></topic><title>画布 1</title><legend visibility="visible"><position svg:x="486" svg:y="-281"/></legend></sheet></xmap-revision-content>